<?php namespace ProcessWire;

// Note: the renaming feature is actually handled by the core InputfieldFile::processInputFile()

class FilesRenameReplace extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Files Rename Replace',
			'summary' => 'Allows files to be renamed or replaced in Page Edit.',
			'version' => '0.2.1',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/FilesRenameReplace',
			'icon' => 'refresh',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.0, PHP>=5.4.0',
		);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$enable = false;
		if(!$this->allowed_roles || $this->user->isSuperuser()) {
			// All roles are allowed or user is superuser
			$enable = true;
		} else {
			foreach($this->allowed_roles as $allowed_role) {
				if($this->user->hasRole($allowed_role)) {
					$enable = true;
					break;
				}
			}
		}
		if($enable) {
			$this->addHookAfter('InputfieldFile::renderReadyHook', $this, 'afterRenderReady');
			$this->addHookAfter('InputfieldFile::renderItem', $this, 'afterRenderItem');
			$this->addHookBefore('InputfieldFile::processInput', $this, 'beforeProcessInput');
			$this->addHookAfter('InputfieldFile::processInputFile', $this, 'afterProcessInputFile');
		}
	}

	/**
	 * Add JS and CSS dependencies
	 *
	 * @param HookEvent $event
	 */
	protected function afterRenderReady(HookEvent $event) {
		$inputfield = $event->object;
		if($inputfield->className !== 'InputfieldFile') return;

		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->scripts->add($config->urls->{$this} . "{$this}.js?v={$version}");
		$config->styles->add($config->urls->{$this} . "{$this}.css?v={$version}");
	}

	/**
	 * Add extra inputs to file items
	 *
	 * @param HookEvent $event
	 */
	protected function afterRenderItem(HookEvent $event) {
		/* @var InputfieldFile $inputfield */
		$inputfield = $event->object;
		if($inputfield->className !== 'InputfieldFile') return;

		$field = $inputfield->hasField;
		if(!$field) return;
		$pagefile = $event->arguments(0);
		$id = $event->arguments(1);
		$event->return .= $this->files->render($this->config->paths->$this . 'extra_inputs', array(
			'id' => $id,
			'inputfield' => $inputfield,
			'pagefile' => $pagefile,
		));
	}

	/**
	 * Replace: copy metadata and sort to replacement files
	 *
	 * @param HookEvent $event
	 */
	protected function beforeProcessInput(HookEvent $event) {
		/* @var InputfieldFile $inputfield */
		$inputfield = $event->object;
		if($inputfield->className !== 'InputfieldFile') return;

		$input = $event->arguments(0);
		if(!$inputfield->value) return;
		foreach($inputfield->value as $pagefile) {
			$id = "{$inputfield->name}_{$pagefile->hash}";
			$replace_key = "replacewith_$id";
			$replace = $input->$replace_key;
			if(!$replace) continue;
			$replace_file = $inputfield->value->getFile($replace);
			if($replace_file && $replace_file instanceof Pagefile) {
				// Copy input for original file to replacement file
				$replace_id = "{$inputfield->name}_{$replace_file->hash}";
				foreach($input as $key => $value) {
					// Skip input not related to this pagefile
					if(strpos($key, $id) === false) continue;
					// Skip delete
					if(strpos($key, 'delete_') === 0) continue;
					// Skip inputfields added by this module
					if(strpos($key, 'rename_') === 0) continue;
					if(strpos($key, 'replacewith_') === 0) continue;
					// Set input
					$new_key = str_replace($id, $replace_id, $key);
					$input->$new_key = $value;
				}
			}
		}
		$event->arguments(0, $input);
	}

	/**
	 * Replace: delete old file and rename replacement file
	 *
	 * @param HookEvent $event
	 */
	protected function afterProcessInputFile(HookEvent $event) {
		/* @var InputfieldFile $inputfield */
		$inputfield = $event->object;
		/** @var WireInputData $input */
		$input = $event->arguments(0);
		/** @var Pagefile $pagefile */
		$pagefile = $event->arguments(1);
		if($inputfield->className !== 'InputfieldFile') return;
		if(!$inputfield->value) return;

		$id = "{$inputfield->name}_{$pagefile->hash}";
		$key = "replacewith_$id";
		$replace = $input->$key;
		if(!$replace) return;
		$replace_file = $inputfield->value->getFile($replace);
		if($replace_file && $replace_file instanceof Pagefile) {
			$upload_name = $pagefile->filedata('uploadName');
			if($upload_name) $replace_file->filedata('uploadName', $upload_name);
			$inputfield->processInputDeleteFile($pagefile);
			if(strtolower($replace_file->ext()) == strtolower($pagefile->ext())) {
				$inputfield->value->rename($replace_file, $pagefile->name);
			}
			$event->return = true; // track change
		}
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		/* @var InputfieldAsmSelect $f */
		$f = $this->modules->InputfieldAsmSelect;
		$f_name = 'allowed_roles';
		$f->name = $f_name;
		$f->label = $this->_('Roles that may rename/replace files');
		$f->description = $this->_('Leave this empty to enable module for all roles.');
		$roles = $this->roles->find("name!=guest");
		foreach($roles as $select_option) {
			$f->addOption($select_option->name);
		}
		$f->value = $this->$f_name;
		$inputfields->add($f);
	}

}
